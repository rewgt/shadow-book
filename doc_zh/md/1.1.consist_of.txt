1.1 构件组成与定制方式
-----------------------

&nbsp;

从本节开始介绍如何定制 shadow-book，会涉及用 Shadow Widget 如何开发本程序的各项细节，如果您不关心定制扩展，读完 [上一节](#0.1.) 本手册就算学完了，后面各章节不必读下去。

#### 网页构成

Shadow Book 的界面非常简单，左侧是章节导航列表，右侧是正文内容区。导航列表在 `summary.json` 文件中定义，该 json 文件还定义各章节所对应的 md 文件，鼠标点击左侧某列表项时，相应的 md 文件自动读入，把 markdown 转化为 html 标签后显示到正文区。

界面的 Web 页由 `index.html` 定义，查阅该文件源码（存放在 `summary.json` 同目录下），您可找出本软件依赖的 CSS 与 JS 库，它们都在 `index.html` 所属目录的各级子目录中，所以，我们把 `index.html` 所属目录整体搬移（已包含 `summary.json` 及 `md` 子目录下所有文件），挪到其它文件夹，网页的包含与依赖关系仍是完整的，仍能用浏览器打开正常使用。

#### 三个 UI 库构件

手册主界面包括如下节点定义：

```
    body
    +-- book
    |   +-- summary      // 左侧章节导航列表
    |   +-- splitter     // 分割条，拖动可改变导航列表的占宽
    |   +-- main         // 内容区的容器
    |   |   +-- content  // 右侧内容区
```

当 `index.html` 中导入 `shadow-book.min.js` 文件后，该 JS 库将注册 `".rewgt.book_summary", ".rewgt.book_content", ".rewgt.book_top"` 三个库节点。其中前两个库节点分别被 `".body.book.summay"` 与 `".body.book.content"` 引用，即：主界面 `summary` 与 `content` 节点只是简单引用，具体的界面行为在 `book_summary` 与 `book_content` 两个库节点定义。

第 3 个库构件 `".rewgt.book_top"` 用来在界面右下角显示一个 “跳至页首” 图标，点击这个图标当前页将向上翻页至顶部。本页就是个例子，看到右下角那个图标了吗？点击试试。

#### <a name="extend_type"></a>定制扩展方式

Shadow Book 提供两种定制扩展方式。

其一，**在 `summary.json` 中指定  JS 库**，系统自动用 `<script>` 标签引入这个 JS 库，该库按 Shadow Widget 构件系统的编程规则，在当前主界面插入若干经定制的构件，比如，在内容区上方插入一块工具栏面板。

其二，**以工程化方式二次开发**，既可以在当前 shadow-book 手册（复制为另一工程）基础上继续编程，也可以创建全新工程，然后重用 shadow-book 共享的 UI 库做开发。

#### 定制的约束

1. Shadow Book 接管 `window.onhashchange` 事件，让网页 URL 的 hash 段能用来指示 “当前手册显示哪一页”，在章节导航栏点击跳转后，形成新的 URL 还纳入历史网页（即调用 `window.history.pushState()`）管理。定制扩展时，不应破坏这个 `onhashchange` 与历史页机制。

2. Shadow Book 约定的 `summary.json` 格式不应被破坏，但允许采用兼容模式，配置项可以扩展，但不能删减或改变已有项目的用法。

3. Shadow Book 借助 localStorage 记录哪些页已被点击，使用 `"rewgt/shadow-book/books"` 与 `"rewgt/shadow-book/one_book_key"` 键值，其中 `one_book_key` 键可能有多个，单个 `one_book_key` 是一本手册 URL 路径的哈希值（32位整数）。定制扩展时，请不改变在用键值的格式。

<pre $=".rewgt.book_top"></pre>

&nbsp;
