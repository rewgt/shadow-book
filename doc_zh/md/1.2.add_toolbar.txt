1.2 添加定制的工具栏
--------------------

&nbsp;

#### 扩展库配置项

`summary.json` 定义了如下格式的配置：

``` js
  [ {title:"Shadow book", navPanelWidth:240, storageExpiredDays:250, ctrlPanelLib:""}, 
    page_index, ... 
  ]
```

其中列表的首项用作全局配置，其后若干 page_index 都是章节索引项定义，格式详见 [索引项定义](#2.1.)。配置项 `ctrlPanelLib` 用来指定一个 JS 文件，便于系统初始化时，自动用 `<script>` 标签引入这个 JS 库，当然，`ctrlPanelLib` 值若为空串，表示忽略扩展库。

#### 一个极简的例子

比如我们给 `ctrlPanelLib` 赋值 `"toolbar.js"`，在 `index.html` 文件所在目录下创建 `toolbar.js` 文件，把下面代码保存到这个 JS 文件。

``` js
var main = W.$main, utils = W.$utils, ex = W.$ex;

( function() {

var mainPanel = W.W('.body.book.main').component;
var contentPanel = mainPanel.componentOf('content');

var jsonX = [ ['Panel',{key:'toolbar',
    height:50,borderWidth:[0,0,1,0],
    style:{backgroundColor:'#fafafa',borderColor:'#f4f4f4'}},
  ],
  [ ['P',{key:'p',width:0.9999,padding:[4,8,0,8]}],
    ['Span',{key:'info'}],
  ],
];
var ele = utils.loadElement(jsonX);

mainPanel.setChild('+content',ele, function() {
  var infoComp = mainPanel.componentOf('toolbar.p.info');
  
  contentPanel.listen('jumpTo', function(value,oldValue) {
    if (infoComp.isHooked)
      infoComp.duals['html.'] = JSON.stringify(value);
  });
});

})();
```

由于 Shadow Book 引入的 `React`、`ReactDOM`、`W` 均用 cdn 版本，所以这几个变量已登记在 `window` 下，不必 `require` 即可使用。

上面代码实现如下功能：
1. 创建一个面板（key 名为 `toolbar`）用作工具栏，在面板中放置一个 Span 构件（key 名为 `info`）
2. 把工具栏面板插入到显示 markdown 正文的面板之前，即显示在右侧内容区的顶部
3. 侦听内容面板（key 名为 `content`）中的 `jumpTo` 属性，并用工具栏的 Span 构件显示该属性值。

现在，在浏览器刷新当前工程页面，检查一下是不是有个工具栏插入了，在左侧章节导航栏点击，打开不同内容页时，看看工具栏中显示的信息是否跟随变化。

#### 页跳转的 URL 格式

上例中 `contentPanel.duals.jumpTo` 的格式为：

``` js
  [sPreviousId, sNextId, sCurrentId, sPageUrl, sAnchor, sTitle]
```

在 summary.json 文件的索引定义中，每页都用 URL 指定相应的 md 文件（就是这里的 `sPageUrl`），还分配唯一 ID 号，这里的 `sPreviousId, sNextId, sCurrentId` 分别为前一页、后一页、当前页的 ID 号。`sAnchor` 指示当前定位锚点，在打开当前页后系统尝试跳到 `sAnchor` 锚点定义处，`sTitle` 是当前章节索引项的标题。

Shadow Book 用 URL 中的 hash 段字串指示打开文件的位置，比如：`"#1.1."` 表示打开 ID 号为 `"1.1."` 的文档页（系统从索引项列表中找出相应的 md 文件读入）。比如 **`"#1.1.!extend_type"`**，表示打开 ID 为 `"1.1."` 的内容页后，再跳转到 `extend_type` 锚点。

> *试一下这个链接会跳到哪里：[“定制扩展方式”](#1.1.!extend_type) *

在 markdown 中用类似如下文本定义锚点：

``` html
  <a name="extend_type"></a>
```

另外，手册的链接跳转大部分在手册跳转，跳到手册外的 URL 宜用 markdown 文本写成如下样子：

``` html
  <a target="_blank" href="https://github.com/rewgt/shadow-book">Shadow Book 项目</a>
```

这么写的好处是，用户点击时 **将在新页打开**，当前阅读中的手册不被切换，让阅读注意力保持连贯。

#### 工具栏内容开发

上面例子够简单，也清晰说明了工具条是如何扩展的，我们既可以侦听 `contentPanel.duals.jumpTo`，也可以侦听其它构件的 dulas 属性，Shadow Book 共享的两个 UI 库构件的接口规格请参考 [“接口规格”](#2.)。

在定制的工具栏通常提供：分享内容页给好友、报告错误、调整字号、查找或过滤索引项等功能。由于库化 UI 对外提供的构件接口，已是 Shadow Widget 中 WTC 类定义供编程的粒度，定制扩展很方便，限制很少。

&nbsp;
